export default {
  tradicionales: [
    {
      nombre: "Codificar y corregir",
      imagen:
        "https://slideplayer.com/slide/5686856/18/images/10/code-and-fix+model+Code+First+Version+Modify+until+Client+is+satisfied.jpg",
      descripcion:
        "es el concepto de empezar inmediatamente a codificar y diseñar el sistema, solo para ir resolviendo los problemas que vayan saliendo a lo largo del desarrollo",
      ventajas: [
        " todo lo elige el desarrollador",
        "pueden evitarse algunos conflictos de tecnologías, frameworks y lenguajes",
      ],
      desventajas: [
        " los requerimientos del cliente no siempre son respetados",
        "calidad mala al producto final",
        "pérdida de tiempo y dinero que supone enfrentarse a un error",
      ],
      recomienda:
        "Usualmente cuando existe muy poco tiempo. Cuando el equipo de desarrollo se enfrenta a una fecha límite muy ajustada es recomendado utilizarlo",
      dev_team: "pequeño",
      team_exp: "poca",
      proy_size: "pequeño",
      lapso_tiempo: "corto",
      control_riesgos: "nulo",
      planeacion: "nula",
      pruebas: "ninguna",
      calidad_final: "baja",
      interaccion_cliente: "nula",
      mantenimiento: "nulo",
      documentacion: "nula",
      adaptacion_cambio: "nula",
    },
    {
      nombre: "Desarrollo Estructurado",
      imagen:
        "https://qph.fs.quoracdn.net/main-qimg-928c9546324340d0925c40077161eeb9",
      descripcion:
        "Modelo de desarrollo en el cual una aplicación es construida comenzando con una descripción de alto nivel de lo que se planea que haga, y dividiendo la especificación a piezas o fragmentos cada vez más simples",
      ventajas: [
        "Establece de manera concisa todas las partes del proyecto",
        "brinda una clara relación entre cada elemento y parte del proyecto",
        "gran visión de cómo se dividirán cada parte del desarrollo",
      ],
      desventajas: [
        "Complica la parte de pruebas",
        "nada ejecutable existe hasta más tarde en el proceso de desarrollo",
        "se realizan decisiones desde el inicio del proyecto de partes de alto nivel de la aplicación",
      ],
      recomienda:
        "Cuando en el equipo de desarrollo se acostumbra a atacar los problemas de manera abstracta. O cuando en un equipo de desarrollo no se puede encontrar una solución clara al problema.",
      dev_team: "mediano",
      team_exp: "mediana",
      proy_size: "mediano",
      lapso_tiempo: "mediano",
      control_riesgos: "bajo",
      planeacion: "grande",
      pruebas: "algunas",
      calidad_final: "mediana",
      interaccion_cliente: "nula",
      mantenimiento: "mediano",
      documentacion: "mediana",
      adaptacion_cambio: "nula",
    },
    {
      nombre: "Cascada",
      imagen:
        "https://upload.wikimedia.org/wikipedia/commons/thumb/e/e2/Waterfall_model.svg/1200px-Waterfall_model.svg.png",
      descripcion:
        "Esta metodología ordena rigurosamente las etapas del proceso para el desarrollo del software, de tal forma que el inicio de cada etapa debe esperar a la finalización de la etapa anterior.",
      ventajas: [
        "Tiene un buen desempeño en equipos débiles y productos maduros",
        "Es un modelo fácil de implementar y entender",
        "Es un modelo conocido y utilizado con frecuencia",
      ],
      desventajas: [
        "En la vida real rara vez un proyecto sigue una secuencia lineal",
        "El proceso de creación de software tarda mucho tiempo",
        "Una etapa determinada del proyecto no se puede llevar a cabo a menos que se haya culminado la etapa anterior",
      ],
      recomienda:
        "Cuando se requiera iniciar de manera rápida y el equipo de desarrollo no sea tan fuerte",
      dev_team: "mediano",
      team_exp: "poca",
      proy_size: "grande",
      lapso_tiempo: "grande",
      control_riesgos: "mediano",
      planeacion: "mediana",
      pruebas: "algunas",
      calidad_final: "mediana",
      interaccion_cliente: "nula",
      mantenimiento: "mediano",
      documentacion: "grande",
      adaptacion_cambio: "nula",
    },
    {
      nombre: "Sashimi",
      descripcion:
        "Considerado como una variación del ciclo de vida del software en cascada puro, en el cual las diferentes etapas pueden ser solapadas, permitiendo así aumentar la eficiencia mediante uso de retroalimentación entre las mismas.",
      imagen: "https://complextester.files.wordpress.com/2012/08/sashmii.png",
      ventajas: [
        "Ganancia de calidad con respecto al método tradicional de cascada.",
        "Planificación sencilla.",
        "Al ser un método continuo, su documentación es menor.",
      ],
      desventajas: [
        "Es más complicado controlar el progreso del progreso del proyecto.",
        "Dificultad para identificar el inicio y el fin de cada etapa.",
        "Dificultad de reconocer todos los requerimientos desde un inicio .",
      ],
      recomienda:
        "Cuando el equipo de desarrollo esté experimentado y se requiera iniciar de forma rápida un proyecto, también cuando el proyecto tienda a tener cambios en el trayecto ya que este modelo si bien no es tanta, tiene retroalimentación.",
      dev_team: "mediano",
      team_exp: "mediana",
      proy_size: "grande",
      lapso_tiempo: "mediano",
      control_riesgos: "mediano",
      planeacion: "baja",
      pruebas: "pocas",
      calidad_final: "mediana",
      interaccion_cliente: "nula",
      mantenimiento: "bajo",
      documentacion: "poca",
      adaptacion_cambio: "baja",
    },
    {
      nombre: "Cascada con Subproyectos",
      descripcion:
        "Es básicamente un enfoque metodológico que adapta las etapas del ciclo de vida del software de manera ordenada. Se denomina así porque permite la ejecución de algunas de las tareas de la cascada en paralelo.",
      imagen:
        "https://lscauml.files.wordpress.com/2012/01/casacada-con-subproyectos.jpg",
      ventajas: [
        "Se puede dividir bastante el equipo de desarrollo",
        "El tiempo se aprovecha mucho mejor que en el ciclo de vida tradicional.",
        "Pruebas mucho más robustas.",
      ],
      desventajas: [
        "Si existe alguna dependencia en subproyectos, retrasa la creación del sistema.",
        "El proceso de creación es un tanto lento.",
        "El proceso es más complicado.",
      ],
      recomienda:
        "Para este tipo de metodología, se necesita un equipo un poco más grande que el ciclo de vida tradicional, además de que debe ser experimentado. También es recomendado utilizarse en un proyecto el cual se pueda observar que tendrá distintos subproyectos o componentes que puedan ser desarrollados en paralelo.",
      dev_team: "grande",
      team_exp: "alta",
      proy_size: "grande",
      lapso_tiempo: "mediano",
      control_riesgos: "mediano",
      planeacion: "grande",
      pruebas: "muchas",
      calidad_final: "grande",
      interaccion_cliente: "nula",
      mantenimiento: "bajo",
      documentacion: "mediana",
      adaptacion_cambio: "baja",
    },
    {
      nombre: "Modelo Incremental",
      descripcion:
        "Este modelo fue creado como respuesta a las debilidades del modelo tradicional de cascada. De manera general, el proceso se divide en 4 partes: Análisis, Diseño, Código y Pruebas, sin embargo, para la producción de software, se usa el principio de trabajo en cadena o pipeline, utilizado de muchas otras formas en la programación",
      imagen:
        "https://www.guru99.com/images/6-2015/052615_1049_WhatisIncre2.png",
      ventajas: [
        "Los usuarios y/o clientes no tienen que esperar hasta que el sistema esté completo para hacer uso del mismo.",
        "Los usuarios pueden utilizar los incrementos iniciales como prototipos",
        "Existen menos probabilidades de riesgo en el sistema.",
      ],
      desventajas: [
        "La entrega temprana de los proyectos produce la creación de sistemas demasiados simples",
        "La mayoría de los incrementos se harán en base de las necesidades de los usuarios.",
        "Los incrementos no deben constar de muchas líneas de código",
      ],
      recomienda:
        "Es recomendado utilizar este modelo cuando el cliente no tiene un idea muy clara de cuáles son sus requerimientos para el proyecto de software que se le entregará",
      dev_team: "pequeño",
      team_exp: "alta",
      proy_size: "mediano",
      lapso_tiempo: "corto",
      control_riesgos: "mediano",
      planeacion: "baja",
      pruebas: "muchas",
      calidad_final: "grande",
      interaccion_cliente: "mediana",
      mantenimiento: "mediano",
      documentacion: "poca",
      adaptacion_cambio: "mediana",
    },
    {
      nombre: "Cascada Incremental",
      descripcion:
        "El proyecto se divide en pequeños incrementos, dichos incrementos implementan funcionalidades esenciales para el proyecto general y cada incremento se presenta al cliente. De esta forma se mantiene al cliente en constante contacto con los resultados obtenidos en cada incremento, y el cliente es el que incluye o desecha elementos al final de cada incremento, con el fin de que el producto final se adapte mejor a sus necesidades.",
      imagen:
        "https://media.geeksforgeeks.org/wp-content/uploads/20190315205204/Untitled1-Diagram.png",
      ventajas: [
        "Los usuarios pueden utilizar los incrementos iniciales como prototipos",
        "Existen menos probabilidades de riesgo en el sistema.",
        "Ya que los sistemas de más alta prioridad se entregan primero, y los incrementos posteriores se integran entre ellos, es muy probable que los sistemas más importantes sean a los que se les hagan más pruebas.",
      ],
      desventajas: [
        "La entrega temprana de los proyectos produce la creación de sistemas demasiados simples",
        "La mayoría de los incrementos se harán en base de las necesidades de los usuarios",
        "Los incrementos no deben constar de muchas líneas de código",
      ],
      recomienda:
        "Es recomendado utilizar este modelo cuando el cliente no tiene un idea muy clara de cuáles son sus requerimientos para el proyecto de software que se le entregará",
      dev_team: "grande",
      team_exp: "alta",
      proy_size: "grande",
      lapso_tiempo: "mediano",
      control_riesgos: "grande",
      planeacion: "mediana",
      pruebas: "muchas",
      calidad_final: "mediana",
      interaccion_cliente: "mediana",
      mantenimiento: "mediano",
      documentacion: "mediana",
      adaptacion_cambio: "mediana",
    },
    {
      nombre: "Entrega por Etapas",
      descripcion:
        "Es similar al al modelo de prototipos, se muestra al cliente el software en diferentes estados sucesivos de desarrollo, se diferencia en que las especificaciones no son conocidas en detalle al inicio del proyecto y por tanto, se van desarrollando simultáneamente con las diferentes versiones del código",
      imagen:
        "https://slideplayer.es/slide/5404945/17/images/9/Modelo+Entrega+por+Etapas.jpg",
      ventajas: [
        "Requiere poca sofisticación para los directivos y desarrolladores.",
        "Permite modificaciones durante el desarrollo.",
        "Requiere poco tiempo de gestión.",
        "Genera un sistema altamente fiable y con alto desarrollo.",
      ],
      desventajas: [
        "Está sometido a planificación predefinida.",
        "Trabaja con poca compresión sobre la arquitectura.",
        "Trabaja con poca identificación sobre los requerimientos del diseño.",
      ],
      recomienda:
        "Es recomendado utilizar este modelo cuando el cliente no tiene un idea muy clara de cuáles son sus requerimientos para el proyecto de software que se le entregará",
      dev_team: "grande",
      team_exp: "mediana",
      proy_size: "grande",
      lapso_tiempo: "mediano",
      control_riesgos: "mediano",
      planeacion: "grande",
      pruebas: "muchas",
      calidad_final: "grande",
      interaccion_cliente: "mediana",
      mantenimiento: "mediano",
      documentacion: "poca",
      adaptacion_cambio: "mediana",
    },
    {
      nombre: "Diseño por planificacion",
      descripcion:
        "Tiene como objetivo la obtención de un marco de referencia para el desarrollo de sistemas de información que responda a los objetivos estratégicos de la organización.",
      imagen:
        "https://image.slidesharecdn.com/representacindedesarrollodesoftwareporplanificacin-161126233846/95/repositorio-representacin-de-desarrollo-de-software-por-planificacin-1-638.jpg?cb=1480203579",
      ventajas: [
        "Se pueden observar los requerimientos antes de empezar el proyecto, ahorrando asi recursos humanos y económicos.",
        "Se puede tener una mejor idea de lo que se quiere hacer.",
      ],
      desventajas: [
        "Algunas metodologías son muy estrictas.",
        "Poca flexibilidad al cambio",
      ],
      recomienda: "En todo proyecto en el que se conocen los requerimientos.",
      dev_team: "mediano",
      team_exp: "alta",
      proy_size: "mediano",
      lapso_tiempo: "grande",
      control_riesgos: "grande",
      planeacion: "grande",
      pruebas: "algunas",
      calidad_final: "grande",
      interaccion_cliente: "nula",
      mantenimiento: "bajo",
      documentacion: "mediana",
      adaptacion_cambio: "baja",
    },
    {
      nombre: "Modelo en V del ministerio alemán de la defensa",
      descripcion:
        "La idea básica se remonta a los años 70 y fue concebida como una especie de desarrollo posterior del modelo de cascada. Además de las fases de desarrollo de un proyecto, el modelo V también define los procedimientos de gestión de la calidad que lo acompañan y describe cómo pueden interactuar estas fases individuales entre sí. Su nombre se debe a su estructura, que se asemeja a la letra V.",
      imagen:
        "https://upload.wikimedia.org/wikipedia/commons/thumb/e/e8/Systems_Engineering_Process_II.svg/599px-Systems_Engineering_Process_II.svg.png",
      ventajas: [
        "Optimización de la comunicación entre las partes involucradas a través de términos y responsabilidades claramente definidos.",
        "Minimización de riesgos y mejor planificación a través de roles, estructuras y resultados fijos y predeterminados.",
        "Mejora de la calidad del producto gracias a medidas de control de la calidad firmemente integradas.",
      ],
      desventajas: [
        "Muy simple para mapear todo el proceso de desarrollo desde el punto de vista de los desarrolladores.",
        "Está sobre todo centrado en la gestión de proyectos.",
        "Estructura relativamente rígida permite una respuesta poco flexible a los cambios durante el desarrollo.",
      ],
      recomienda:
        "En la mayoría de las ofertas de nuevos proyectos de software de las autoridades públicas, el uso del modelo V es incluso obligatorio y, por lo tanto, es un pilar esencial, especialmente en las empresas que desarrollan software para las autoridades públicas y los ministerios. Se puede implementar en proyectos de software de cualquier tamaño, ya sea en empresas, en el sector militar o en el sector público. Es una herramienta que facilita la organización e implementación del desarrollo, mantenimiento y desarrollo de una amplia variedad de sistemas de TIC.",
      dev_team: "mediano",
      team_exp: "alta",
      proy_size: "mediano",
      lapso_tiempo: "mediano",
      control_riesgos: "grande",
      planeacion: "grande",
      pruebas: "muchas",
      calidad_final: "grande",
      interaccion_cliente: "mediana",
      mantenimiento: "grande",
      documentacion: "poca",
      adaptacion_cambio: "mediana",
    },
    {
      nombre: "Modelo Iterativo",
      descripcion:
        "Es un modelo derivado del ciclo de vida en cascada. Este modelo busca reducir el riesgo que surge entre las necesidades del usuario y el producto final por malos entendidos durante la etapa de recogida de requisitos.",
      imagen:
        "https://4.bp.blogspot.com/-JPTk7lFWqJM/UE9ej0ONpvI/AAAAAAAAADk/OaATIcjpm-Y/s1600/ModeloIterativol_grafica.jpg",
      ventajas: [
        "No hace falta que los requisitos estén totalmente definidos al inicio del desarrollo, sino que se pueden ir refinando en cada una de las iteraciones.",
        "Tiene la ventaja de realizar el desarrollo en pequeños ciclos, lo que permite gestionar mejor los riesgos, etc.",
        "El cliente espera poco hasta ver algo tangible. En cada iteración puede comprobar los avances y el beneficio que le reporta.",
      ],
      desventajas: [
        "Implica tener un cliente involucrado durante el desarrollo y dispuesto a invertir los recursos necesarios en el proceso.",
        "La relación con nuestro cliente debe basarse en principios éticos y una colaboración mutua.",
        "Infunde responsabilidad en el equipo de desarrollo al trabajar directamente con el cliente, con lo cual no todo profesional puede verse involucrado.",
      ],
      recomienda:
        "Este modelo se suele utilizar en proyectos en los que los requisitos no están claros por parte del usuario, por lo que se hace necesaria la creación de distintos prototipos para presentarlos y conseguir la conformidad del cliente.",
      dev_team: "mediano",
      team_exp: "mediana",
      proy_size: "grande",
      lapso_tiempo: "mediano",
      control_riesgos: "grande",
      planeacion: "grande",
      pruebas: "muchas",
      calidad_final: "mediana",
      interaccion_cliente: "grande",
      mantenimiento: "grande",
      documentacion: "poca",
      adaptacion_cambio: "mediana",
    },
    {
      nombre: "Prototipado",
      descripcion:
        "El Modelo de prototipos pertenece a los modelos de desarrollo evolutivo. El prototipo debe ser construido en poco tiempo, usando los programas adecuados y no se debe utilizar muchos recursos.",
      imagen: "https://i.ytimg.com/vi/gpd0dpCTmFw/hqdefault.jpg",
      ventajas: [
        "No modifica el flujo del ciclo de vida",
        "Reduce el riesgo de construir productos que no satisfagan las necesidades de los usuarios",
        "Reduce costo y aumenta la probabilidad de éxito",
      ],
      desventajas: [
        "Debido a que el usuario ve que el prototipo funciona piensa que este es el producto terminado",
        "El desarrollador puede caer en la tentación de ampliar el prototipo para construir el sistema final sin tener en cuenta los compromisos de calidad y mantenimiento que tiene con el cliente.",
      ],
      recomienda:
        "Esta técnica puede ser utilizada en cualquier etapa del desarrollo. A medida que el proceso progresa y el producto se completa, el prototipo ha de abarcar, cada vez más, las características del producto final. Llegados a un punto, la construcción de prototipos adicionales resultará menos eficiente que usar las construcciones iniciales para el producto.",
      dev_team: "mediano",
      team_exp: "mediana",
      proy_size: "mediano",
      lapso_tiempo: "corto",
      control_riesgos: "mediano",
      planeacion: "baja",
      pruebas: "algunas",
      calidad_final: "mediana",
      interaccion_cliente: "mediana",
      mantenimiento: "mediano",
      documentacion: "mediana",
      adaptacion_cambio: "mediana",
    },
    {
      nombre: "Prototipado Evolutivo",
      descripcion:
        "En este modelo se desarrolla el concepto del sistema a medida que avanza el proyecto.",
      imagen:
        "https://image.slidesharecdn.com/modelodeciclodevidadeprototipadoevolutivo-170918011853/95/modelo-de-ciclo-de-vida-de-prototipado-evolutivo-6-638.jpg?cb=1505697670",
      ventajas: [
        "El éxito del uso del prototipo depende de qué tan pronto y con qué frecuencia se reciba la retroalimentación del usuario para hacer cambios y adecuarlos a las necesidades actuales.",
        "Permite al desarrollador darse cuenta de lo que requiere el cliente.",
        "Los cambios iniciales durante el desarrollo de un proyecto son menos costosos que si se realizan en etapas tardías.",
      ],
      desventajas: [
        "Administración difícil: Dicha dificultad radica en manejar el prototipo como un proyecto dentro del Ciclo de Desarrollo de Sistema sin perder de vista cuál era su propósito.",
        "Adoptarlo como el sistema final: Los usuarios y profesionales de sistemas pueden considerar al prototipo como el sistema final cuando aún es incompleto e inadecuado.",
        "El desarrollador  y  el cliente tienen poca comunicación al inicio del proceso.",
      ],
      recomienda:
        "Cuando los requerimientos en un sistema cambian con rapidez.",
      dev_team: "pequeño",
      team_exp: "alta",
      proy_size: "mediano",
      lapso_tiempo: "mediano",
      control_riesgos: "bajo",
      planeacion: "baja",
      pruebas: "algunas",
      calidad_final: "mediana",
      interaccion_cliente: "mediana",
      mantenimiento: "grande",
      documentacion: "mediana",
      adaptacion_cambio: "grande",
    },
    {
      nombre: "Modelo de cascada con prototipado",
      descripcion:
        "El proyecto progresa a través de una secuencia ordenada de pasos partiendo del concepto inicial del producto hasta la prueba para evaluar la efectividad y características esperadas.Cuando la revisión determina que el producto no está listo para pasar a la fase de desarrollo, permanece en la etapa de construcción hasta que se cumpla con lo prioritariamente establecido.",
      imagen:
        "https://slideplayer.es/slide/3775834/12/images/8/Cascada+c%2Fprototipos+Validar+Verificar+PROTOTIPADO+ANALISIS+DE.jpg",
      ventajas: [
        "Realiza un buen funcionamiento en equipos débiles y productos maduros, por lo que se requiere de menos capital y herramientas para hacerlo funcionar de manera óptima.",
        "Es un modelo fácil de implementar y entender.",
        "Está orientado a documentos.",
      ],
      desventajas: [
        "En la vida real, un proyecto rara vez sigue una secuencia lineal, esto crea una mala implementación del modelo, lo cual hace que lo lleve al fracaso.",
        "Cualquier error de diseño detectado en la etapa de prueba conduce necesariamente al rediseño y nueva programación del código afectado, aumentando los costos del desarrollo.",
        "Una etapa determinada del proyecto no se puede llevar a cabo a menos de que se haya culminado la etapa anterior.",
      ],
      recomienda:
        "El modelo se adapta mejor a proyectos de software de poca envergadura.Se recomienda usar en proyectos en los que los requerimientos son claros y están fijos, sin esperar cambios, ya que puede retrasar el desarrollo del proyecto.",
      dev_team: "mediano",
      team_exp: "alta",
      proy_size: "grande",
      lapso_tiempo: "mediano",
      control_riesgos: "mediano",
      planeacion: "grande",
      pruebas: "algunas",
      calidad_final: "grande",
      interaccion_cliente: "mediana",
      mantenimiento: "grande",
      documentacion: "grande",
      adaptacion_cambio: "mediana",
    },
    {
      nombre: "Entrega Evolutiva",
      descripcion:
        "Se basa en la idea de desarrollar una implementación inicial, exponiéndose a los comentarios del usuario y refinando a través de las diferentes versiones hasta que se desarrolla un sistema adecuado. Las actividades de especificación, desarrollo y validación se entrelazan en vez de separarse, con una rápida retroalimentación entre estas.",
      imagen:
        "https://ingsoftware.weebly.com/uploads/2/3/8/2/23822483/6836777_orig.jpg",
      ventajas: [
        "La ventaja es que la especificación se puede desarrollar de forma creciente.",
        "Tan pronto como los usuarios desarrollen un mejor entendimiento de su problema, este se puede reflejar en el sistema de software.",
      ],
      desventajas: [
        "El proceso no es visible: los administradores tienen que hacer entregas regulares para medir el progreso.",
        "Si los sistemas se desarrollan rápidamente, no es rentable producir documentos que reflejan cada versión del sistema.",
      ],
      recomienda:
        "ara sistemas pequeños y de tamaño medio, el enfoque evolutivo de desarrollo es el mejor. Los problemas del desarrollo evolutivo se hacen particularmente agudos para sistemas grandes y complejos con un periodo de vida largo, donde diferentes equipos desarrollan distintas partes del sistema. Es difícil establecer una arquitectura del sistema estable usando este enfoque, el cual hace difícil integrar las contribuciones de los equipos.",
      dev_team: "pequeño",
      team_exp: "alta",
      proy_size: "mediano",
      lapso_tiempo: "corto",
      control_riesgos: "mediano",
      planeacion: "baja",
      pruebas: "algunas",
      calidad_final: "grande",
      interaccion_cliente: "mediana",
      mantenimiento: "grande",
      documentacion: "poca",
      adaptacion_cambio: "mediana",
    },
    {
      nombre: "Espiral",
      descripcion:
        "El modelo en espiral es una combinación entre el modelo lineal o de cascada y el modelo iterativo o basado en prototipos que habíamos mencionado anteriormente. Se utiliza con éxito en proyectos donde el coste de un fallo es un gran riesgo, de ahí que su principal aportación sea considerar la gestión de esos riesgos, algo que en los modelos anteriores ni siquiera se menciona.",
      imagen:
        "https://i1.wp.com/aspgems.com/wp-content/uploads/2019/04/modelo-espiral-destacado.png?fit=1000%2C519&ssl=1",
      ventajas: [
        "Los factores de riesgo son reducidos.",
        "El desarrollo es iterativo y se pueden incorporar funcionalidades progresivamente.",
      ],
      desventajas: [
        "La duración de la ejecución no es concreta.",
        "Fallos en el análisis de riesgos podría influir negativamente a todo el proyecto.",
      ],
      recomienda:
        "Cuando se inicia teniendo un proyecto pequeño que poco a poco va a ir creciendo",
      dev_team: "pequeño",
      team_exp: "alta",
      proy_size: "grande",
      lapso_tiempo: "mediano",
      control_riesgos: "mediano",
      planeacion: "mediana",
      pruebas: "algunas",
      calidad_final: "grande",
      interaccion_cliente: "baja",
      mantenimiento: "grande",
      documentacion: "poca",
      adaptacion_cambio: "mediana",
    },
    {
      nombre: "Espiral con reducción de riesgos",
      descripcion:
        "Barry W. Boehm presentó su enfoque para el desarrollo de aplicaciones complejas en 1986 y en 1988 el ingeniero de software americano publicó su modelo en la publicación A Spiral Model of Software Development and Enhancement también en un contexto más general. En esta publicación, describe el modelo en espiral como una posible alternativa al modelo establecido hasta entonces, el modelo en cascada, que al mismo tiempo servía como base empírica.",
      imagen:
        "https://i1.wp.com/aspgems.com/wp-content/uploads/2019/04/modelo-espiral-destacado.png?fit=1000%2C519&ssl=1",
      ventajas: [
        "Modelo flexible y genérico",
        "Posible integración temprana de promotores y usuarios",
        "Comprobaciones periódicas y enfocadas al riesgo",
      ],
      desventajas: [
        "Gran esfuerzo de gestión",
        "Las decisiones periódicas pueden dilatar el proceso de desarrollo",
        "Know-how en análisis y gestión de riesgo esencial, pero no siempre disponible",
      ],
      recomienda:
        "l desarrollo de software siguiendo el modelo en espiral es muy popular, sobre todo en proyectos grandes y complejos, en los que el control del presupuesto para promotores y empresas de desarrollo tiene especial importancia. En este caso, todas las partes implicadas se benefician del papel central del análisis de riesgo, que representa la mayor ventaja del desarrollo en espiral en comparación con otros modelos de procedimiento.",
      dev_team: "mediano",
      team_exp: "alta",
      proy_size: "grande",
      lapso_tiempo: "mediano",
      control_riesgos: "grande",
      planeacion: "grande",
      pruebas: "muchas",
      calidad_final: "grande",
      interaccion_cliente: "mediana",
      mantenimiento: "grande",
      documentacion: "poca",
      adaptacion_cambio: "grande",
    },
    {
      nombre: "Rapid Application Development",
      descripcion:
        "Este método abarca el desarrollo interactivo, la creación de prototipos y el empleo de utilidades CASE (Computer Aided Software Engineering). Además, la metodología RAD suele englobar también la usabilidad, utilidad y la rapidez de ejecución.",
      imagen:
        "https://kissflow.com/wp-content/uploads/2018/07/Rapid-application-development.png",
      ventajas: [
        "Avances medibles: Al contar con numerosas iteraciones, componentes y prototipos desplegados cada cierto tiempo, se podrá medir y evaluar de forma sencilla el desarrollo del proyecto",
        "Productivos más pronto: La metodología DRA permitirá a los desarrolladores adoptar roles multidisciplinares que creen prototipos y códigos de trabajo de forma rápida, lo que supone ser productivos más rápido.",
        "Separación de los componentes del sistema: La metodología RAD exige a los diseñadores y desarrolladores a generar componentes funcionales e independientes por sí mismos, y así poder usarlos en en una versión o prototipo iterativo.",
      ],
      desventajas: [
        "Requiere sistemas modulares: Cuando aplicamos el método RAD, cada componente del sistema debe ser iterable y constatable por sí mismo, para poder ser modificados o intercambiados por cualquier miembro del equipo.",
        "Dificultad dentro de proyectos a gran escala: Cuando estemos ante un proyecto que implique muchas personas y aplicaciones, la flexibilidad puede llegar a ser un problema",
        "Necesidad de desarrolladores senior: Aplicar la metodología RAD no es tan fácil como parece, por lo que en el equipo serán necesarios desarrolladores hábiles que sean capaces de aplicar y adaptarse a cualquier necesidad o cambio.",
      ],
      recomienda:
        "En la actualidad, las empresas invierten gran parte de sus recursos en desarrollar aplicaciones que les permitan trabajar de forma más eficiente. Con la aparición de los modelos de desarrollo rápido de aplicaciones, podremos crear softwares de forma rápida y barata para satisfacer las necesidades empresariales sin invertir tanto tiempo y dinero.",
      dev_team: "mediano",
      team_exp: "alta",
      proy_size: "grande",
      lapso_tiempo: "corto",
      control_riesgos: "grande",
      planeacion: "grande",
      pruebas: "muchas",
      calidad_final: "grande",
      interaccion_cliente: "grande",
      mantenimiento: "grande",
      documentacion: "poca",
      adaptacion_cambio: "grande",
    },
    {
      nombre: "Diseño por herramientas",
      descripcion:
        "Esta línea de investigación se desarrolla en forma colaborativa entre docentes investigadores de la Universidad Nacional del Comahue y de la Universidad Nacional del Sur, en el marco de proyectos de investigación financiados por las universidades antes mencionadas.",
      imagen:
        "https://www.recursosenprojectmanagement.com/wp-content/uploads/2015/09/Metodolog%C3%ADa-proceso-y-herramientas.-Grafico.jpg",
      ventajas: [
        "Facilidad para la revisión de aplicaciones",
        "Soporte para el desarrollo de prototipos de sistemas",
        "Generación de Código",
      ],
      desventajas: [
        "Contabilidad en los métodos estructurados",
        "Falta de niveles estándar para el soporte de la metodología",
        "Conflictos en el uso de los diagramas",
      ],
      recomienda: "Proyectos Grandes",
      dev_team: "grande",
      team_exp: "alta",
      proy_size: "mediano",
      lapso_tiempo: "mediano",
      control_riesgos: "mediano",
      planeacion: "mediana",
      pruebas: "pocas",
      calidad_final: "mediana",
      interaccion_cliente: "baja",
      mantenimiento: "mediano",
      documentacion: "mediana",
      adaptacion_cambio: "baja",
    },
    {
      nombre: "Software Comercial Existente",
      descripcion:
        "Es un término del Reglamento Federal de Adquisiciones (FAR), que define un elemento no-desarrollativo (NDI) de suministro, que es a la vez comercial y se vende en grandes cantidades en el mercado comercial, y que puede ser adquirido o utilizado bajo contrato gubernamental de la misma forma exacta a como está disponible al público en general. Por ejemplo, para los elementos relacionados con la tecnología, tales como programas informáticos, sistemas de hardware o de software libre con apoyo comercial y materiales de construcción están calificados así, pero carga a los productos a granel, tales como los productos agrícolas y el petróleo.",
      imagen:
        "https://www.ginaabudi.com/wp-content/uploads/2010/10/cotsvendors.png",
      ventajas: [
        "Software personalizado es creado para tener una interfaz sencilla con otro software",
        "Es más fácil e intuitivo de usar y no contiene instalaciones innecesarias",
        "Buenos servicios de desarrollo de software agregan valor a una empresa",
      ],
      desventajas: [
        "Si el software no se desarrolla a través de programas profesionales de software a medida, que puede estar lleno de errores, y puede ser poco fiable e inestable.",
        "Puesto que el software es para requisitos particulares según sus necesidades de grandes empresas, el costo puede ser mayor que los paquetes de software.",
        "No tener el código del software puede resultar en exposición y depende de los desarrolladores.",
      ],
      recomienda:
        "En los últimos años se ha visto un aumento en el uso de componentes comerciales en prácticas de reutilización de software. Concretamente, estos componentes comerciales comúnmente conocidos con el nombre de COTS ( Commercial Off The Shelf ) están siendo considerados con  mayor frecuencia para la construcción de sistemas complejos, distribuidos y abiertos.",
      dev_team: "grande",
      team_exp: "mediana",
      proy_size: "grande",
      lapso_tiempo: "mediano",
      control_riesgos: "mediano",
      planeacion: "grande",
      pruebas: "algunas",
      calidad_final: "grande",
      interaccion_cliente: "mediana",
      mantenimiento: "mediano",
      documentacion: "mediana",
      adaptacion_cambio: "baja",
    },
    {
      nombre: "Desarrollo Basado en Componentes",
      descripcion:
        "Durante algunos años fue reseñado como una filosofía conocida como 'compre', y no construya divulgada por Fred Brooks en 1987 y que respaldaba el uso de componentes prefabricados sin tener que desarrollarlos nuevamente.",
      imagen:
        "https://matriarm.files.wordpress.com/2009/12/untitled2.jpg?w=640",
      ventajas: [
        "Simplifica las pruebas",
        "Simplifica el mantenimiento del sistema",
        "Mayor calidad",
      ],
      desventajas: [
        "Genera mucho tiempo",
        "Genera mucho trabajo adicional",
        "Confiabilidad de los componentes",
      ],
      recomienda:
        "El modelo de desarrollo basado en componentes incorpora muchas de las características del modelo espiral. Es evolutivo por naturaleza y exige un enfoque interactivo para la creación del software. Sin embargo, el modelo de desarrollo basado en componentes configura aplicaciones desde componentes preparados de software (clases).",
      dev_team: "mediano",
      team_exp: "mediana",
      proy_size: "mediano",
      lapso_tiempo: "grande",
      control_riesgos: "mediano",
      planeacion: "baja",
      pruebas: "muchas",
      calidad_final: "grande",
      interaccion_cliente: "baja",
      mantenimiento: "grande",
      documentacion: "poca",
      adaptacion_cambio: "mediana",
    },
    {
      nombre: "Modelo de Especificación Operacional ZAVE",
      descripcion:
        "Lo que materializa la realización de un proyecto es la ejecución secuencial e integrada de diversas actividades. En el diseño, se ha de indicar de manera concreta y precisa, cuáles son las actividades que hay que ejecutar para alcanzar la s metas y objetivos propuestos.",
      imagen: "",
      ventajas: [
        "Foco en lo operativo, se trabaja en mejorar los procesos",
        "Apropiado para optimizar el alineamiento entre los procesos y áreas de la empresa",
        "Es relativamente fácil de implantar",
      ],
      desventajas: [
        "No implica una revisión de la estrategia",
        "La identificación de indicadores es para las áreas o gerencias resulta más trabajosa",
      ],
      recomienda:
        "Se recomienda principalmente para proyectos que puedan iniciar como algo pequeño pero que puedan llegar a crecer mucho",
      dev_team: "mediano",
      team_exp: "poca",
      proy_size: "mediano",
      lapso_tiempo: "mediano",
      control_riesgos: "mediano",
      planeacion: "baja",
      pruebas: "pocas",
      calidad_final: "mediana",
      interaccion_cliente: "baja",
      mantenimiento: "mediano",
      documentacion: "mediana",
      adaptacion_cambio: "baja",
    },
    {
      nombre: "Análisis y Diseño Orientado a Objetos",
      descripcion:
        "El análisis y diseño orientado a objetos (ADOO) es un enfoque de análisis en ingeniería de software que modela un sistema como un grupo de objetos que interactúan entre sí. Este enfoque representa un dominio absoluto en términos de conceptos compuestos por verbos y sustantivos, clasificados de acuerdo con su dependencia funcional.",
      imagen:
        "https://slideplayer.es/slide/94222/1/images/4/EL+MACROPROCESO+DE+DESARROLLO.jpg",
      ventajas: [
        "Establece un lenguaje de enlace para expresar el modelado de datos entre analistas, usuarios, programadores y en general, personas involucradas en un proyecto de desarrollo.",
        "Permite llegar de manera guiada y prácticamente automática, a un diseño y desarrollo correcto y normalizado",
        "Proximidad de los conceptos de modelado respecto a objetos del mundo real",
      ],
      desventajas: [
        "a la hora de realizar el análisis y los requerimientos, se torna un poco complicado o difícil",
        "no se enfoca directamente para luego modelar procesos de negocios",
        "El AOO está diseñado para un público eminentemente técnico",
      ],
      recomienda:
        "Se pueden definir varias funciones dentro de las clases y objetos con lo que se cumplirá el objetivo principal de su desarrollo. Se tiene la oportunidad de personalizar varios elementos, esto dependerá de las capacidades y atributos que ofrecen los lenguajes de programación con que se desarrollará la pieza de software. No se tiene un establecido en cuanto a un lenguaje, ya que se cumplen diferentes funciones y trabajan en distintas plataformas.",
      dev_team: "mediano",
      team_exp: "alta",
      proy_size: "grande",
      lapso_tiempo: "grande",
      control_riesgos: "mediano",
      planeacion: "grande",
      pruebas: "algunas",
      calidad_final: "grande",
      interaccion_cliente: "baja",
      mantenimiento: "mediano",
      documentacion: "grande",
      adaptacion_cambio: "baja",
    },
    {
      nombre: "Proceso Unificado de Desarrollo de Software",
      descripcion:
        "RUP es un marco genérico que puede especializarse para una variedad de tipos de sistemas, diferentes áreas de aplicación, tipos de organizaciones, niveles de aptitud y diferentes tamaños de proyectos. RUP está basado en componentes. El sw está formado por componentes software interconectados a través de interfaces. RUP está dirigido por casos de uso, centrado en la arquitectura, y es iterativo e incremental.",
      imagen:
        "https://1.bp.blogspot.com/-aUcRb-_Sz0M/Vqr1DJGESKI/AAAAAAAAACM/2PnMQbfYVGc/s1600/fb74fcdc59b82cd.png",
      ventajas: [
        "reducción de riesgos en el proyecto",
        "garantía de calidad",
        "integración entre lo que es propiamente desarrollo con mantenimiento de software",
      ],
      desventajas: [
        "requiere una gran previsión sobre lo que va a ocurrir",
        "genera abundante trabajo adicional",
        "no suele resultar práctico para proyectos pequeños",
      ],
      recomienda:
        "En la arquitectura y por ser iterativo e incremental en ingeniería de software.",
      dev_team: "mediano",
      team_exp: "alta",
      proy_size: "grande",
      lapso_tiempo: "grande",
      control_riesgos: "grande",
      planeacion: "mediana",
      pruebas: "muchas",
      calidad_final: "grande",
      interaccion_cliente: "mediana",
      mantenimiento: "mediano",
      documentacion: "poca",
      adaptacion_cambio: "mediana",
    },
  ],
  agiles: [
    {
      nombre: "Extreme Programming",
      descripcion:
        "Extreme Programming (XP) es una metodología de desarrollo de software ágil la cual tiene como objetivo mejorar la calidad de software y su respuesta al cambio de los requerimientos del usuario. Al ser una metodología ágil, aboga por lanzamientos frecuentes en ciclos cortos de desarrollo, mejorando la productividad e introduciendo checkpoints en los cuales nuevos requerimientos del cliente pueden ser abordados.",
      imagen:
        "https://upload.wikimedia.org/wikipedia/commons/thumb/8/84/Extreme_Programming.svg/1200px-Extreme_Programming.svg.png",
      ventajas: [
        "Relación estrecha con el cliente",
        "Ausencia de trabajos de programación innecesarios",
        "Software estable debido a continuas pruebas",
      ],
      desventajas: [
        "Mayor esfuerzo de trabajo",
        "El cliente se implica en el proceso",
        "Relativamente caro",
      ],
      recomienda:
        "Requerimientos de software dinámicamente en cambio, riesgos causados por tiempos justos usando nuevas tecnologías",
      dev_team: "pequeño",
      team_exp: "alta",
      proy_size: "mediano",
      lapso_tiempo: "mediano",
      control_riesgos: "grande",
      planeacion: "baja",
      pruebas: "muchas",
      calidad_final: "grande",
      interaccion_cliente: "grande",
      mantenimiento: "grande",
      documentacion: "poca",
      adaptacion_cambio: "grande",
    },
    {
      nombre: "Adaptive Software Development",
      descripcion:
        "Es un término sombrilla para un conjunto de frameworks y buenas prácticas basados en los valores y principios expresados en el Manifiesto para el desarrollo de software ágil y los 12 principios detrás del mismo.",
      imagen:
        "https://www.tutorialspoint.com/adaptive_software_development/images/practices_learning_loop.jpg",
      ventajas: [
        "Satisfacción del cliente mediante la rápida entrega de software funcional.",
        "El software funcional es entregado constantemente.",
        "Cooperación diaria cercana entre las personas de negocio y el equipo de desarrollo.",
      ],
      desventajas: [
        "En algunas entregas, especialmente en las más largas, es difícil estimar el tiempo de desarrollo que tomarán.",
        "Existe falta de énfasis en diseño necesario y documentación",
        "El proyecto puede salir de rumbo fácilmente si el cliente no está claro en el resultado final que desean.",
      ],
      recomienda:
        "Cuando es necesario implementar nuevos cambios. La libertad que da esta metodología al cambio es muy importante. Se pueden implementar nuevos cambios a muy bajo costo debido a la frecuencia de nuevos incrementos que se producen.",
      dev_team: "mediano",
      team_exp: "mediana",
      proy_size: "grande",
      lapso_tiempo: "mediano",
      control_riesgos: "grande",
      planeacion: "mediana",
      pruebas: "muchas",
      calidad_final: "grande",
      interaccion_cliente: "grande",
      mantenimiento: "grande",
      documentacion: "poca",
      adaptacion_cambio: "grande",
    },
    {
      nombre: "Dynamic Systems Development Method",
      descripcion:
        "Lanzado por primera vez en 1994, originalmente para proveer algo de disciplina al método RAD (rapid application development). Ajusta costo, calidad y tiempo con el uso de priorización MosCoW, musts (debo), shoulds (debería), coulds (podría), y will not (no haré), de esta forma se priorizan las funciones que conforman los requerimientos del cliente y se ajusta el entregable a la fecha de tiempo correspondiente.",
      imagen:
        "https://upload.wikimedia.org/wikipedia/commons/c/c3/DSDM_Atern_Project_Phases.png",
      ventajas: [
        "Los proyectos son liberados en tiempo, aún permitiendo flexibilidad.",
        "El progreso puede ser entendido fácilmente a través de la organización.",
        "Los casos del negocio están en el núcleo del modelo, asegurando que los proyectos liberados tengan un valor real de negocio.",
      ],
      desventajas: [
        "Los altos gastos generales de administración y la implementación costosa, hacen que esto no sea adecuado para organizaciones pequeñas.",
        "Puede ser restrictivo e inhibir la creatividad del desarrollador.",
      ],
      recomienda:
        "Si el equipo de desarrollo valora la previsibilidad, la coherencia y el control estricto de los costos, entonces esta metodología podría ser una buena opción, sin embargo, perderá creatividad y flexibilidad, lo que puede ser no tan adecuado para empresas emergentes más pequeñas.",
      dev_team: "pequeño",
      team_exp: "mediana",
      proy_size: "mediano",
      lapso_tiempo: "mediano",
      control_riesgos: "grande",
      planeacion: "mediana",
      pruebas: "muchas",
      calidad_final: "grande",
      interaccion_cliente: "grande",
      mantenimiento: "grande",
      documentacion: "poca",
      adaptacion_cambio: "grande",
    },
    {
      nombre: "Melé",
      descripcion:
        "Es un proceso en el que se aplican de manera regular un conjunto de buenas prácticas para trabajar colaborativamente, en equipo, y obtener el mejor resultado posible de un proyecto. Estas prácticas se apoyan unas a otras y su selección tiene origen en un estudio de la manera de trabajar de equipos altamente productivos.",
      imagen:
        "https://res.cloudinary.com/industry-plus/image/upload/w_1056/dpr_auto,f_auto,q_auto/v1559056625/showcase/6977-cropped",
      ventajas: [
        "Gestión de las expectativas del usuario.",
        "Resultados anticipados.",
        "Flexibilidad y adaptación a los contextos.",
      ],
      desventajas: [
        "Funciona más que nada con equipos reducidos.",
        "Requiere una exhaustiva definición de las tareas y sus plazos.",
        "Exige que quienes la utilicen cuenten con una alta cualificación o formación.",
      ],
      recomienda:
        "Scrum está especialmente indicado para proyectos en entornos complejos, donde se necesita obtener resultados pronto, donde los requisitos son cambiantes o poco definidos, donde la innovación, la competitividad, la flexibilidad y la productividad son fundamentales.",
      dev_team: "pequeño",
      team_exp: "mediana",
      proy_size: "grande",
      lapso_tiempo: "mediano",
      control_riesgos: "grande",
      planeacion: "mediana",
      pruebas: "muchas",
      calidad_final: "grande",
      interaccion_cliente: "grande",
      mantenimiento: "grande",
      documentacion: "poca",
      adaptacion_cambio: "grande",
    },
    {
      nombre: "Crystal Clear Methods",
      descripcion:
        "Esta metodología de desarrollo ágil se enfoca primordialmente en las personas y sus interacciones cuando trabajan en un proyecto en lugar de en procesos y herramientas.",
      imagen: "https://assets.devx.com/articlefigs/17424.jpg",
      ventajas: [
        "Se puede ajustar al tipo de proyecto, tamaño de equipo y a los requerimientos del proyecto.",
        "Existe prioridad en las entregas de los componentes críticos y esenciales del proyecto.",
        "El proyecto puede ser tan pequeño como 8 personas.",
      ],
      desventajas: [
        "Los principios seguidos pueden variar según el equipo y el tamaño del proyecto, lo que dificulta su comprensión.",
        "Necesita comunicación constante, esta es la razón por la que puede que no funcione bien para los proyectos que tienen múltiples áreas de trabajo.",
        "Dado que la planificación y el desarrollo no dependen de los requisitos, resulta difícil pasar de un enfoque a otro en la mitad del proyecto.",
      ],
      recomienda:
        "Al ser tan flexible, este tipo de metodología se recomienda tanto para equipos muy pequeños como para equipos muy grandes, ya que su misma ideología plantea este tipo de diferencias. También se recomienda tener un equipo unido y no necesariamente de gente muy preparada puesto que la unión y comunicación puede ayudar a los miembros a llegar al mismo fin pasando por un buen aprendizaje a lo largo del proyecto.",
      dev_team: "mediano",
      team_exp: "alta",
      proy_size: "mediano",
      lapso_tiempo: "mediano",
      control_riesgos: "grande",
      planeacion: "mediana",
      pruebas: "muchas",
      calidad_final: "grande",
      interaccion_cliente: "grande",
      mantenimiento: "grande",
      documentacion: "mediana",
      adaptacion_cambio: "grande",
    },
    {
      nombre: "Feature Driven Development",
      descripcion:
        "Es un enfoque ágil para el desarrollo de sistemas, el cual se enfoca en iteraciones cortas que entregan funcionalidad tangible. Dicho enfoque no hace énfasis en la obtención de los requerimientos sino en cómo se realizan las fases de diseño y construcción. Sin embargo, fue diseñado para trabajar con otras actividades de desarrollo de software y no requiere la utilización de ningún modelo de proceso específico. Además, hace énfasis en aspectos de calidad durante todo el proceso e incluye un monitoreo permanente del avance del proyecto.",
      imagen:
        "https://aist.global/storage/images/uploads/1579697935214287715.jpg",
      ventajas: [
        "Está pensado para equipos y proyectos grandes.",
        "Detalla más el proceso.",
        "Detalla la iteración cero.",
      ],
      desventajas: [
        "Falta de documentación del diseño.",
        "Problemas derivados de la comunicación oral.",
        "Fuerte dependencia de las personas.",
      ],
      recomienda:
        "Serían recomendados cuando se trata de proyectos de software que son más complejos y que son más grandes.",
      dev_team: "mediano",
      team_exp: "poca",
      proy_size: "mediano",
      lapso_tiempo: "corto",
      control_riesgos: "mediano",
      planeacion: "baja",
      pruebas: "muchas",
      calidad_final: "grande",
      interaccion_cliente: "grande",
      mantenimiento: "mediano",
      documentacion: "nula",
      adaptacion_cambio: "grande",
    },
    {
      nombre: "Agile Modeling",
      descripcion:
        "Es una metodología para modelar y documentar sistemas de software basada en las mejores prácticas. Es una colección de valores y principios que se pueden aplicar en un proyecto de desarrollo de software (ágil). Esta metodología es más flexible que los métodos de modelado tradicionales, por lo que se adapta mejor a un entorno que cambia rápidamente.",
      imagen:
        "researchgate.net/publication/322192112/figure/fig1/AS:578066095276032@1514833105301/Agile-modeling-11.png",
      ventajas: [
        "Rápida respuesta a los cambios.",
        "Intervención del cliente en el proceso.",
        "Entregas del producto a intervalos.",
      ],
      desventajas: [
        "Fuerte dependencia de los líderes.",
        "Falta de documentación.",
        "Soluciones erróneas en etapas largas.",
      ],
      recomienda:
        "Si necesitas lanzar rápidamente un producto básico sobre el que luego puedes construir y agregar más características, entonces la metodología ágil puede ser más apropiada para tu proyecto.",
      dev_team: "mediano",
      team_exp: "mediana",
      proy_size: "pequeño",
      lapso_tiempo: "corto",
      control_riesgos: "mediano",
      planeacion: "mediana",
      pruebas: "muchas",
      calidad_final: "grande",
      interaccion_cliente: "grande",
      mantenimiento: "grande",
      documentacion: "nula",
      adaptacion_cambio: "grande",
    },
    {
      nombre: "Kanban",
      descripcion:
        "Actualmente, Kanban ha pasado a formar parte de las llamadas metodologías ágiles, cuyo objetivo es gestionar de manera general cómo se van completando las tareas. Kanban es una palabra japonesa que significa “tarjetas visuales”, donde Kan es “visual”, y Ban corresponde a “tarjeta”.",
      imagen:
        "https://d112uwirao0vo9.cloudfront.net/wp-content/uploads/2018/11/The-Concept-of-flow-Kanban-.png",
      ventajas: [
        "Medición del rendimiento.",
        "Organización del flujo de trabajo.",
        "Cumplir los tiempos de entrega.",
      ],
      desventajas: [
        "Coste. Si se usa este método para unidades muy grandes, el almacenamiento del sistema de Kanban será muy costoso.",
        "Es limitado. Al limitar el número de tareas, cuando se trata de trabajos inmensos no es posible aplicar esta metodología",
        "Kanban no es óptimo para todo tipo de proyectos. Kanban asume sistemas de producción repetitivos",
      ],
      recomienda:
        "Indicado para aquellas organizaciones que requieran de flexibilidad especialmente en la entrada de tareas, así como en el seguimiento de estas, la priorización, la supervisión del equipo de trabajo y los informes de dedicación.",
      dev_team: "mediano",
      team_exp: "mediana",
      proy_size: "grande",
      lapso_tiempo: "corto",
      control_riesgos: "mediano",
      planeacion: "baja",
      pruebas: "muchas",
      calidad_final: "grande",
      interaccion_cliente: "grande",
      mantenimiento: "grande",
      documentacion: "poca",
      adaptacion_cambio: "grande",
    },
    {
      nombre: "Scrum",
      descripcion:
        "Es un proceso en el que se aplican de manera regular un conjunto de buenas prácticas para trabajar colaborativamente, en equipo, y obtener el mejor resultado posible de un proyecto. Estas prácticas se apoyan unas a otras y su selección tiene origen en un estudio de la manera de trabajar de equipos altamente productivos.",
      imagen: "https://miro.medium.com/proxy/1*b-K7r8oIZpbWmkIL-7S91w.png",
      ventajas: [
        "Gestión de las expectativas del usuario.",
        "Flexibilidad y adaptación a los contextos.",
        "Gestión sistemática de riesgos.",
      ],
      desventajas: [
        "Funciona más que nada con equipos reducidos.",
        "Requiere una exhaustiva definición de las tareas y sus plazos.",
        "Exige que quienes la utilicen cuenten con una alta cualificación o formación.",
      ],
      recomienda:
        "Scrum está especialmente indicado para proyectos en entornos complejos, donde se necesita obtener resultados pronto, donde los requisitos son cambiantes o poco definidos, donde la innovación, la competitividad, la flexibilidad y la productividad son fundamentales.",
      dev_team: "pequeño",
      team_exp: "mediana",
      proy_size: "grande",
      lapso_tiempo: "mediano",
      control_riesgos: "grande",
      planeacion: "mediana",
      pruebas: "muchas",
      calidad_final: "grande",
      interaccion_cliente: "grande",
      mantenimiento: "grande",
      documentacion: "poca",
      adaptacion_cambio: "grande",
    },
    {
      nombre: "Scrumban",
      descripcion:
        "La metodología Scrumban nace de la combinación de principios de los métodos ágiles de gestión de proyectos más importantes en la actualidad: Scrum y Kanban. Aunque en principio pueden parecer iguales, las dos estrategias de gestión presentan diferencias en la manera de ejecutar el proyecto.",
      imagen:
        "https://tutorials.one/wp-content/uploads/scrumban/scrumban-tutorial-34.png",
      ventajas: [
        "Agilidad en la gestión",
        "Gestión de los riesgos del proyecto",
        "Planificación flexible",
      ],
      desventajas: [
        "Necesidad de usar una app online, para una adecuada comunicación con todo el equipo",
        "Facilidad para descentrarse del objetivo principal del proyecto",
        "Falta de visión general de los resultados del proyecto",
      ],
      recomienda:
        "Una combinación de estos dos métodos tiene muchas ventajas. Puede ayudar al equipo de desarrollo a eliminar el elevado estrés, mejorar la eficiencia y la satisfacción general del cliente. Sin embargo, las importantes son: la entrega de productos de alta calidad, la mejora continua, la minimización de pérdidas y la reducción del tiempo de producción.",
      dev_team: "mediano",
      team_exp: "mediana",
      proy_size: "grande",
      lapso_tiempo: "mediano",
      control_riesgos: "grande",
      planeacion: "grande",
      pruebas: "muchas",
      calidad_final: "grande",
      interaccion_cliente: "grande",
      mantenimiento: "grande",
      documentacion: "poca",
      adaptacion_cambio: "grande",
    },
    {
      nombre: "Lean Software Development",
      descripcion:
        "El término de desarrollo de software lean se utilizó por primera vez como título de una conferencia organizada por la iniciativa ESPRIT de la Unión Europea. Sin mantener relación alguna, Robert “Bob” Charette, planteó un año después el concepto de desarrollo de software lean como parte de su trabajo de investigación sobre mejores formas para administrar los riesgos en proyectos de software.",
      imagen:
        "https://hangoutagile.com/wp-content/uploads/2018/09/Lean-Software-Development.jpg",
      ventajas: [
        "Eliminación de Residuos: La eliminación de los residuos conduce a la eficiencia global del proceso de desarrollo.",
        "Entrega Oportuna: La entrega temprana del producto es una ventaja definitiva. Esto significa que su equipo de desarrollo puede ofrecer mayor funcionalidad en un corto periodo de tiempo",
        "Empoderamiento del equipo: El empoderamiento del equipo de desarrollo ayuda a desarrollar la capacidad de decisión de los miembros del equipo que a su vez, crea un equipo más motivado.",
      ],
      desventajas: [
        "Dependencia del equipo: El proyecto depende en gran medida de la cohesión del equipo y los compromisos individuales de los miembros del equipo.",
        "El éxito depende del equipo: El éxito del proyecto depende de la disciplina de los miembros del equipo así cómo sus habilidades técnicas.",
        "Toma de decisiones tardías: Por lo regular la toma de decisiones es complicada, dado que se tiene un cierto miedo al tomarlas al momento y es por ello que se toman muy tarde.",
      ],
      recomienda:
        "En casos donde se busque reducir los desperdicios de información",
      dev_team: "pequeño",
      team_exp: "mediana",
      proy_size: "mediano",
      lapso_tiempo: "corto",
      control_riesgos: "grande",
      planeacion: "grande",
      pruebas: "muchas",
      calidad_final: "grande",
      interaccion_cliente: "grande",
      mantenimiento: "grande",
      documentacion: "poca",
      adaptacion_cambio: "grande",
    },
    {
      nombre: "Development Operations",
      descripcion:
        "DevOps es uno de los términos más mencionados en el actual entorno de IT. Normalmente se asocia a estrategias de transformación digital, y a metodologías como Continuous Delivery o desarrollo ágil.",
      imagen:
        "https://software.af.mil/wp-content/uploads/2019/08/devops-loop.svg",
      ventajas: [
        "Desarrollo más rápido",
        "Plazos más cortos entre actualizaciones y nuevas versiones",
        "Mayor seguridad gracias a la evaluación constante",
      ],
      desventajas: [
        "La dirección de la empresa no consiga familiarizar a los trabajadores con sus ventajas",
        "Los trabajadores podrían mostrarse poco colaborativos en la implementación del concepto",
      ],
      recomienda:
        "Una empresa que implanta un proceso Devops en su actividad diaria va a buscar principalmente dos objetivos: por una parte conciliar sus equipos de programación, operaciones y control de calidad, y además establecer canales eficaces para lanzar productos funcionales de forma continua.",
      dev_team: "pequeño",
      team_exp: "alta",
      proy_size: "pequeño",
      lapso_tiempo: "corto",
      control_riesgos: "grande",
      planeacion: "grande",
      pruebas: "muchas",
      calidad_final: "grande",
      interaccion_cliente: "grande",
      mantenimiento: "grande",
      documentacion: "poca",
      adaptacion_cambio: "grande",
    },
    {
      nombre: "Agile Unified Process",
      descripcion:
        "El Proceso Unificado Agil de Scott Ambler o Agile Unified Process (AUP) en inglés es una versión simplificada del Proceso Unificado de Rational (RUP). Este describe de una manera simple y fácil de entender la forma de desarrollar aplicaciones de software de negocio usando técnicas ágiles y conceptos que aún se mantienen válidos en RUP. El AUP aplica técnicas ágiles incluyendo Desarrollo Dirigido por Pruebas (test driven development - TDD), Modelado Agil, Gestión de Cambios Agil, y Refactorización de Base de Datos para mejorar la productividad.",
      imagen:
        "https://www.inflectra.com/GraphicsViewer.aspx?url=Methodologies/agile-development.xml&name=wordml://03000007.png",
      ventajas: [
        "El personal sabe lo que está haciendo: no obliga a conocer detalles.",
        "Simplicidad: apuntes concisos.",
        "Agilidad: procesos simplificados del RUP",
      ],
      desventajas: [
        "El AUP es un producto muy pesado en relación al RUP.",
        "Como es un proceso simplificado, muchos desarrolladores eligen trabajar con el RUP, por tener a disposición más detalles en el proceso.",
      ],
      recomienda:
        "Si deseamos un método ágil entre XP y RUP tradicionales, que incluya explícitamente las actividades y las herramientas que están acostumbrados, entonces la más aconsejable es la AUP.",
      dev_team: "pequeño",
      team_exp: "mediana",
      proy_size: "mediano",
      lapso_tiempo: "corto",
      control_riesgos: "grande",
      planeacion: "grande",
      pruebas: "muchas",
      calidad_final: "grande",
      interaccion_cliente: "grande",
      mantenimiento: "grande",
      documentacion: "poca",
      adaptacion_cambio: "grande",
    },
    {
      nombre: "Disciplined Agile Delivery",
      descripcion:
        "DAD fue creada por Scott Ambler durante sus años en el departamento de metodologías de IBM. Es un framework “híbrido”: se basa en los principios ágiles, y combina prácticas extraídas de Scrum, XP, Kanban, Lean y sobre todo conceptos de DevOps y entrega y despliegue continuo.",
      imagen:
        "https://www.pmi.org/-/media/pmi/microsites/disciplined-agile/lifecycle-dad-high-level-system-devops-small.jpg?v=9ea9cf04-ee93-46a5-9a26-74e8d19ae6d8",
      ventajas: [
        "Su ciclo de vida es simple y fácil de entender",
        "Su aproximación es 'disciplinada'",
        "Importancia de la simplicidad al eliminar trabajo innecesario",
      ],
      desventajas: [
        "Restricciones en cuanto a tamaño de los proyectos",
        "Cuanto más tarde se descubren este tipo de faltas de alineamiento entre necesidades y soluciones aportadas, más complejo  es conducirlas y más tiempo se tarda en hacerlo.",
        "Problemas derivados del fracaso de los proyectos ágiles. Si un proyecto ágil fracasa no hay documentación o hay muy poca",
      ],
      recomienda:
        "Imagínate que decides que a tu empresa le viene bien seguir solamente Scrum. DAD te propone que además de tener tus sprint, hagas una fase de planificación previa (que también cuente en las estimaciones, en la planificación de la release) y que tengas en cuenta después el tiempo y recursos necesarios para realizar el paso a producción.",
      dev_team: "pequeño",
      team_exp: "poca",
      proy_size: "pequeño",
      lapso_tiempo: "corto",
      control_riesgos: "mediano",
      planeacion: "mediana",
      pruebas: "muchas",
      calidad_final: "grande",
      interaccion_cliente: "grande",
      mantenimiento: "grande",
      documentacion: "poca",
      adaptacion_cambio: "grande",
    },
    {
      nombre: "Open UP",
      descripcion:
        "OpenUP es un Proceso Unificado que aplica enfoques iterativos e incrementales dentro de un ciclo de vida estructurado, utiliza una filosofía ágil que se enfoca en la naturaleza de colaboración en el desarrollo de software. Es una herramienta diagnóstica que puede extenderse para hacer frente a una amplia variedad de proyectos.Está basado en casos de uso, la gestión del riesgo, y una arquitectura centrada a impulsar el desarrollo.",
      imagen:
        "https://3.bp.blogspot.com/_GCiMq2emxkk/Su4jbpfMIDI/AAAAAAAAADs/HOw8d_3DFJs/w1200-h630-p-k-no-nu/cv.jpg",
      ventajas: [
        "Es una metodología ágil.",
        "Se puede adaptar con otros procesos.",
      ],
      desventajas: [
        "A veces omite contenido que puede ser de interés en el proyecto.",
        "Se espera que cubra un amplio sistema de necesidades para los proyectos de desarrollo en un plazo muy corto.",
      ],
      recomienda:
        "En el desarrollo de sistemas que requieran respuestas ágiles con el servidor",
      dev_team: "pequeño",
      team_exp: "poca",
      proy_size: "mediano",
      lapso_tiempo: "mediano",
      control_riesgos: "mediano",
      planeacion: "baja",
      pruebas: "algunas",
      calidad_final: "grande",
      interaccion_cliente: "grande",
      mantenimiento: "grande",
      documentacion: "poca",
      adaptacion_cambio: "grande",
    },
  ],
};
